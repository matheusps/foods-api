// Code generated by Prisma (prisma@1.32.2). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export type Maybe<T> = T | undefined | null;

export interface Exists {
  food: (where?: FoodWhereInput) => Promise<boolean>;
  space: (where?: SpaceWhereInput) => Promise<boolean>;
  storedFood: (where?: StoredFoodWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  food: (where: FoodWhereUniqueInput) => FoodNullablePromise;
  foods: (args?: {
    where?: FoodWhereInput;
    orderBy?: FoodOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Food>;
  foodsConnection: (args?: {
    where?: FoodWhereInput;
    orderBy?: FoodOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FoodConnectionPromise;
  space: (where: SpaceWhereUniqueInput) => SpaceNullablePromise;
  spaces: (args?: {
    where?: SpaceWhereInput;
    orderBy?: SpaceOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Space>;
  spacesConnection: (args?: {
    where?: SpaceWhereInput;
    orderBy?: SpaceOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => SpaceConnectionPromise;
  storedFood: (where: StoredFoodWhereUniqueInput) => StoredFoodNullablePromise;
  storedFoods: (args?: {
    where?: StoredFoodWhereInput;
    orderBy?: StoredFoodOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<StoredFood>;
  storedFoodsConnection: (args?: {
    where?: StoredFoodWhereInput;
    orderBy?: StoredFoodOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => StoredFoodConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createFood: (data: FoodCreateInput) => FoodPromise;
  updateFood: (args: {
    data: FoodUpdateInput;
    where: FoodWhereUniqueInput;
  }) => FoodPromise;
  updateManyFoods: (args: {
    data: FoodUpdateManyMutationInput;
    where?: FoodWhereInput;
  }) => BatchPayloadPromise;
  upsertFood: (args: {
    where: FoodWhereUniqueInput;
    create: FoodCreateInput;
    update: FoodUpdateInput;
  }) => FoodPromise;
  deleteFood: (where: FoodWhereUniqueInput) => FoodPromise;
  deleteManyFoods: (where?: FoodWhereInput) => BatchPayloadPromise;
  createSpace: (data: SpaceCreateInput) => SpacePromise;
  updateSpace: (args: {
    data: SpaceUpdateInput;
    where: SpaceWhereUniqueInput;
  }) => SpacePromise;
  updateManySpaces: (args: {
    data: SpaceUpdateManyMutationInput;
    where?: SpaceWhereInput;
  }) => BatchPayloadPromise;
  upsertSpace: (args: {
    where: SpaceWhereUniqueInput;
    create: SpaceCreateInput;
    update: SpaceUpdateInput;
  }) => SpacePromise;
  deleteSpace: (where: SpaceWhereUniqueInput) => SpacePromise;
  deleteManySpaces: (where?: SpaceWhereInput) => BatchPayloadPromise;
  createStoredFood: (data: StoredFoodCreateInput) => StoredFoodPromise;
  updateStoredFood: (args: {
    data: StoredFoodUpdateInput;
    where: StoredFoodWhereUniqueInput;
  }) => StoredFoodPromise;
  updateManyStoredFoods: (args: {
    data: StoredFoodUpdateManyMutationInput;
    where?: StoredFoodWhereInput;
  }) => BatchPayloadPromise;
  upsertStoredFood: (args: {
    where: StoredFoodWhereUniqueInput;
    create: StoredFoodCreateInput;
    update: StoredFoodUpdateInput;
  }) => StoredFoodPromise;
  deleteStoredFood: (where: StoredFoodWhereUniqueInput) => StoredFoodPromise;
  deleteManyStoredFoods: (where?: StoredFoodWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  food: (
    where?: FoodSubscriptionWhereInput
  ) => FoodSubscriptionPayloadSubscription;
  space: (
    where?: SpaceSubscriptionWhereInput
  ) => SpaceSubscriptionPayloadSubscription;
  storedFood: (
    where?: StoredFoodSubscriptionWhereInput
  ) => StoredFoodSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type FoodOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC";

export type StorageMethod = "FROZEN" | "COLD" | "NATURAL";

export type StoredFoodOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "validThru_ASC"
  | "validThru_DESC";

export type SpaceOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "storeAs_ASC"
  | "storeAs_DESC"
  | "icon_ASC"
  | "icon_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export type FoodWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface FoodWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<FoodWhereInput[] | FoodWhereInput>;
  OR?: Maybe<FoodWhereInput[] | FoodWhereInput>;
  NOT?: Maybe<FoodWhereInput[] | FoodWhereInput>;
}

export type SpaceWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface StoredFoodWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  food?: Maybe<FoodWhereInput>;
  validThru?: Maybe<String>;
  validThru_not?: Maybe<String>;
  validThru_in?: Maybe<String[] | String>;
  validThru_not_in?: Maybe<String[] | String>;
  validThru_lt?: Maybe<String>;
  validThru_lte?: Maybe<String>;
  validThru_gt?: Maybe<String>;
  validThru_gte?: Maybe<String>;
  validThru_contains?: Maybe<String>;
  validThru_not_contains?: Maybe<String>;
  validThru_starts_with?: Maybe<String>;
  validThru_not_starts_with?: Maybe<String>;
  validThru_ends_with?: Maybe<String>;
  validThru_not_ends_with?: Maybe<String>;
  AND?: Maybe<StoredFoodWhereInput[] | StoredFoodWhereInput>;
  OR?: Maybe<StoredFoodWhereInput[] | StoredFoodWhereInput>;
  NOT?: Maybe<StoredFoodWhereInput[] | StoredFoodWhereInput>;
}

export interface SpaceWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  storeAs?: Maybe<StorageMethod>;
  storeAs_not?: Maybe<StorageMethod>;
  storeAs_in?: Maybe<StorageMethod[] | StorageMethod>;
  storeAs_not_in?: Maybe<StorageMethod[] | StorageMethod>;
  foods_every?: Maybe<StoredFoodWhereInput>;
  foods_some?: Maybe<StoredFoodWhereInput>;
  foods_none?: Maybe<StoredFoodWhereInput>;
  icon?: Maybe<String>;
  icon_not?: Maybe<String>;
  icon_in?: Maybe<String[] | String>;
  icon_not_in?: Maybe<String[] | String>;
  icon_lt?: Maybe<String>;
  icon_lte?: Maybe<String>;
  icon_gt?: Maybe<String>;
  icon_gte?: Maybe<String>;
  icon_contains?: Maybe<String>;
  icon_not_contains?: Maybe<String>;
  icon_starts_with?: Maybe<String>;
  icon_not_starts_with?: Maybe<String>;
  icon_ends_with?: Maybe<String>;
  icon_not_ends_with?: Maybe<String>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<SpaceWhereInput[] | SpaceWhereInput>;
  OR?: Maybe<SpaceWhereInput[] | SpaceWhereInput>;
  NOT?: Maybe<SpaceWhereInput[] | SpaceWhereInput>;
}

export type StoredFoodWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface FoodCreateInput {
  id?: Maybe<ID_Input>;
  name: String;
}

export interface FoodUpdateInput {
  name?: Maybe<String>;
}

export interface FoodUpdateManyMutationInput {
  name?: Maybe<String>;
}

export interface SpaceCreateInput {
  id?: Maybe<ID_Input>;
  name: String;
  storeAs: StorageMethod;
  foods?: Maybe<StoredFoodCreateManyInput>;
  icon?: Maybe<String>;
}

export interface StoredFoodCreateManyInput {
  create?: Maybe<StoredFoodCreateInput[] | StoredFoodCreateInput>;
  connect?: Maybe<StoredFoodWhereUniqueInput[] | StoredFoodWhereUniqueInput>;
}

export interface StoredFoodCreateInput {
  id?: Maybe<ID_Input>;
  food: FoodCreateOneInput;
  validThru: String;
}

export interface FoodCreateOneInput {
  create?: Maybe<FoodCreateInput>;
  connect?: Maybe<FoodWhereUniqueInput>;
}

export interface SpaceUpdateInput {
  name?: Maybe<String>;
  storeAs?: Maybe<StorageMethod>;
  foods?: Maybe<StoredFoodUpdateManyInput>;
  icon?: Maybe<String>;
}

export interface StoredFoodUpdateManyInput {
  create?: Maybe<StoredFoodCreateInput[] | StoredFoodCreateInput>;
  update?: Maybe<
    | StoredFoodUpdateWithWhereUniqueNestedInput[]
    | StoredFoodUpdateWithWhereUniqueNestedInput
  >;
  upsert?: Maybe<
    | StoredFoodUpsertWithWhereUniqueNestedInput[]
    | StoredFoodUpsertWithWhereUniqueNestedInput
  >;
  delete?: Maybe<StoredFoodWhereUniqueInput[] | StoredFoodWhereUniqueInput>;
  connect?: Maybe<StoredFoodWhereUniqueInput[] | StoredFoodWhereUniqueInput>;
  set?: Maybe<StoredFoodWhereUniqueInput[] | StoredFoodWhereUniqueInput>;
  disconnect?: Maybe<StoredFoodWhereUniqueInput[] | StoredFoodWhereUniqueInput>;
  deleteMany?: Maybe<StoredFoodScalarWhereInput[] | StoredFoodScalarWhereInput>;
  updateMany?: Maybe<
    | StoredFoodUpdateManyWithWhereNestedInput[]
    | StoredFoodUpdateManyWithWhereNestedInput
  >;
}

export interface StoredFoodUpdateWithWhereUniqueNestedInput {
  where: StoredFoodWhereUniqueInput;
  data: StoredFoodUpdateDataInput;
}

export interface StoredFoodUpdateDataInput {
  food?: Maybe<FoodUpdateOneRequiredInput>;
  validThru?: Maybe<String>;
}

export interface FoodUpdateOneRequiredInput {
  create?: Maybe<FoodCreateInput>;
  update?: Maybe<FoodUpdateDataInput>;
  upsert?: Maybe<FoodUpsertNestedInput>;
  connect?: Maybe<FoodWhereUniqueInput>;
}

export interface FoodUpdateDataInput {
  name?: Maybe<String>;
}

export interface FoodUpsertNestedInput {
  update: FoodUpdateDataInput;
  create: FoodCreateInput;
}

export interface StoredFoodUpsertWithWhereUniqueNestedInput {
  where: StoredFoodWhereUniqueInput;
  update: StoredFoodUpdateDataInput;
  create: StoredFoodCreateInput;
}

export interface StoredFoodScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  validThru?: Maybe<String>;
  validThru_not?: Maybe<String>;
  validThru_in?: Maybe<String[] | String>;
  validThru_not_in?: Maybe<String[] | String>;
  validThru_lt?: Maybe<String>;
  validThru_lte?: Maybe<String>;
  validThru_gt?: Maybe<String>;
  validThru_gte?: Maybe<String>;
  validThru_contains?: Maybe<String>;
  validThru_not_contains?: Maybe<String>;
  validThru_starts_with?: Maybe<String>;
  validThru_not_starts_with?: Maybe<String>;
  validThru_ends_with?: Maybe<String>;
  validThru_not_ends_with?: Maybe<String>;
  AND?: Maybe<StoredFoodScalarWhereInput[] | StoredFoodScalarWhereInput>;
  OR?: Maybe<StoredFoodScalarWhereInput[] | StoredFoodScalarWhereInput>;
  NOT?: Maybe<StoredFoodScalarWhereInput[] | StoredFoodScalarWhereInput>;
}

export interface StoredFoodUpdateManyWithWhereNestedInput {
  where: StoredFoodScalarWhereInput;
  data: StoredFoodUpdateManyDataInput;
}

export interface StoredFoodUpdateManyDataInput {
  validThru?: Maybe<String>;
}

export interface SpaceUpdateManyMutationInput {
  name?: Maybe<String>;
  storeAs?: Maybe<StorageMethod>;
  icon?: Maybe<String>;
}

export interface StoredFoodUpdateInput {
  food?: Maybe<FoodUpdateOneRequiredInput>;
  validThru?: Maybe<String>;
}

export interface StoredFoodUpdateManyMutationInput {
  validThru?: Maybe<String>;
}

export interface FoodSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<FoodWhereInput>;
  AND?: Maybe<FoodSubscriptionWhereInput[] | FoodSubscriptionWhereInput>;
  OR?: Maybe<FoodSubscriptionWhereInput[] | FoodSubscriptionWhereInput>;
  NOT?: Maybe<FoodSubscriptionWhereInput[] | FoodSubscriptionWhereInput>;
}

export interface SpaceSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<SpaceWhereInput>;
  AND?: Maybe<SpaceSubscriptionWhereInput[] | SpaceSubscriptionWhereInput>;
  OR?: Maybe<SpaceSubscriptionWhereInput[] | SpaceSubscriptionWhereInput>;
  NOT?: Maybe<SpaceSubscriptionWhereInput[] | SpaceSubscriptionWhereInput>;
}

export interface StoredFoodSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<StoredFoodWhereInput>;
  AND?: Maybe<
    StoredFoodSubscriptionWhereInput[] | StoredFoodSubscriptionWhereInput
  >;
  OR?: Maybe<
    StoredFoodSubscriptionWhereInput[] | StoredFoodSubscriptionWhereInput
  >;
  NOT?: Maybe<
    StoredFoodSubscriptionWhereInput[] | StoredFoodSubscriptionWhereInput
  >;
}

export interface NodeNode {
  id: ID_Output;
}

export interface Food {
  id: ID_Output;
  name: String;
  updatedAt: DateTimeOutput;
  createdAt: DateTimeOutput;
}

export interface FoodPromise extends Promise<Food>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  updatedAt: () => Promise<DateTimeOutput>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface FoodSubscription
  extends Promise<AsyncIterator<Food>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface FoodNullablePromise
  extends Promise<Food | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  updatedAt: () => Promise<DateTimeOutput>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface FoodConnection {
  pageInfo: PageInfo;
  edges: FoodEdge[];
}

export interface FoodConnectionPromise
  extends Promise<FoodConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<FoodEdge>>() => T;
  aggregate: <T = AggregateFoodPromise>() => T;
}

export interface FoodConnectionSubscription
  extends Promise<AsyncIterator<FoodConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<FoodEdgeSubscription>>>() => T;
  aggregate: <T = AggregateFoodSubscription>() => T;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface FoodEdge {
  node: Food;
  cursor: String;
}

export interface FoodEdgePromise extends Promise<FoodEdge>, Fragmentable {
  node: <T = FoodPromise>() => T;
  cursor: () => Promise<String>;
}

export interface FoodEdgeSubscription
  extends Promise<AsyncIterator<FoodEdge>>,
    Fragmentable {
  node: <T = FoodSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateFood {
  count: Int;
}

export interface AggregateFoodPromise
  extends Promise<AggregateFood>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateFoodSubscription
  extends Promise<AsyncIterator<AggregateFood>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface Space {
  id: ID_Output;
  name: String;
  storeAs: StorageMethod;
  icon?: String;
  updatedAt: DateTimeOutput;
  createdAt: DateTimeOutput;
}

export interface SpacePromise extends Promise<Space>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  storeAs: () => Promise<StorageMethod>;
  foods: <T = FragmentableArray<StoredFood>>(args?: {
    where?: StoredFoodWhereInput;
    orderBy?: StoredFoodOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  icon: () => Promise<String>;
  updatedAt: () => Promise<DateTimeOutput>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface SpaceSubscription
  extends Promise<AsyncIterator<Space>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  storeAs: () => Promise<AsyncIterator<StorageMethod>>;
  foods: <T = Promise<AsyncIterator<StoredFoodSubscription>>>(args?: {
    where?: StoredFoodWhereInput;
    orderBy?: StoredFoodOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  icon: () => Promise<AsyncIterator<String>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface SpaceNullablePromise
  extends Promise<Space | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  storeAs: () => Promise<StorageMethod>;
  foods: <T = FragmentableArray<StoredFood>>(args?: {
    where?: StoredFoodWhereInput;
    orderBy?: StoredFoodOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  icon: () => Promise<String>;
  updatedAt: () => Promise<DateTimeOutput>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface StoredFood {
  id: ID_Output;
  validThru: String;
}

export interface StoredFoodPromise extends Promise<StoredFood>, Fragmentable {
  id: () => Promise<ID_Output>;
  food: <T = FoodPromise>() => T;
  validThru: () => Promise<String>;
}

export interface StoredFoodSubscription
  extends Promise<AsyncIterator<StoredFood>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  food: <T = FoodSubscription>() => T;
  validThru: () => Promise<AsyncIterator<String>>;
}

export interface StoredFoodNullablePromise
  extends Promise<StoredFood | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  food: <T = FoodPromise>() => T;
  validThru: () => Promise<String>;
}

export interface SpaceConnection {
  pageInfo: PageInfo;
  edges: SpaceEdge[];
}

export interface SpaceConnectionPromise
  extends Promise<SpaceConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<SpaceEdge>>() => T;
  aggregate: <T = AggregateSpacePromise>() => T;
}

export interface SpaceConnectionSubscription
  extends Promise<AsyncIterator<SpaceConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<SpaceEdgeSubscription>>>() => T;
  aggregate: <T = AggregateSpaceSubscription>() => T;
}

export interface SpaceEdge {
  node: Space;
  cursor: String;
}

export interface SpaceEdgePromise extends Promise<SpaceEdge>, Fragmentable {
  node: <T = SpacePromise>() => T;
  cursor: () => Promise<String>;
}

export interface SpaceEdgeSubscription
  extends Promise<AsyncIterator<SpaceEdge>>,
    Fragmentable {
  node: <T = SpaceSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateSpace {
  count: Int;
}

export interface AggregateSpacePromise
  extends Promise<AggregateSpace>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateSpaceSubscription
  extends Promise<AsyncIterator<AggregateSpace>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface StoredFoodConnection {
  pageInfo: PageInfo;
  edges: StoredFoodEdge[];
}

export interface StoredFoodConnectionPromise
  extends Promise<StoredFoodConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<StoredFoodEdge>>() => T;
  aggregate: <T = AggregateStoredFoodPromise>() => T;
}

export interface StoredFoodConnectionSubscription
  extends Promise<AsyncIterator<StoredFoodConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<StoredFoodEdgeSubscription>>>() => T;
  aggregate: <T = AggregateStoredFoodSubscription>() => T;
}

export interface StoredFoodEdge {
  node: StoredFood;
  cursor: String;
}

export interface StoredFoodEdgePromise
  extends Promise<StoredFoodEdge>,
    Fragmentable {
  node: <T = StoredFoodPromise>() => T;
  cursor: () => Promise<String>;
}

export interface StoredFoodEdgeSubscription
  extends Promise<AsyncIterator<StoredFoodEdge>>,
    Fragmentable {
  node: <T = StoredFoodSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateStoredFood {
  count: Int;
}

export interface AggregateStoredFoodPromise
  extends Promise<AggregateStoredFood>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateStoredFoodSubscription
  extends Promise<AsyncIterator<AggregateStoredFood>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface FoodSubscriptionPayload {
  mutation: MutationType;
  node: Food;
  updatedFields: String[];
  previousValues: FoodPreviousValues;
}

export interface FoodSubscriptionPayloadPromise
  extends Promise<FoodSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = FoodPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = FoodPreviousValuesPromise>() => T;
}

export interface FoodSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<FoodSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = FoodSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = FoodPreviousValuesSubscription>() => T;
}

export interface FoodPreviousValues {
  id: ID_Output;
  name: String;
  updatedAt: DateTimeOutput;
  createdAt: DateTimeOutput;
}

export interface FoodPreviousValuesPromise
  extends Promise<FoodPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  updatedAt: () => Promise<DateTimeOutput>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface FoodPreviousValuesSubscription
  extends Promise<AsyncIterator<FoodPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface SpaceSubscriptionPayload {
  mutation: MutationType;
  node: Space;
  updatedFields: String[];
  previousValues: SpacePreviousValues;
}

export interface SpaceSubscriptionPayloadPromise
  extends Promise<SpaceSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = SpacePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = SpacePreviousValuesPromise>() => T;
}

export interface SpaceSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<SpaceSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = SpaceSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = SpacePreviousValuesSubscription>() => T;
}

export interface SpacePreviousValues {
  id: ID_Output;
  name: String;
  storeAs: StorageMethod;
  icon?: String;
  updatedAt: DateTimeOutput;
  createdAt: DateTimeOutput;
}

export interface SpacePreviousValuesPromise
  extends Promise<SpacePreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  storeAs: () => Promise<StorageMethod>;
  icon: () => Promise<String>;
  updatedAt: () => Promise<DateTimeOutput>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface SpacePreviousValuesSubscription
  extends Promise<AsyncIterator<SpacePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  storeAs: () => Promise<AsyncIterator<StorageMethod>>;
  icon: () => Promise<AsyncIterator<String>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface StoredFoodSubscriptionPayload {
  mutation: MutationType;
  node: StoredFood;
  updatedFields: String[];
  previousValues: StoredFoodPreviousValues;
}

export interface StoredFoodSubscriptionPayloadPromise
  extends Promise<StoredFoodSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = StoredFoodPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = StoredFoodPreviousValuesPromise>() => T;
}

export interface StoredFoodSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<StoredFoodSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = StoredFoodSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = StoredFoodPreviousValuesSubscription>() => T;
}

export interface StoredFoodPreviousValues {
  id: ID_Output;
  validThru: String;
}

export interface StoredFoodPreviousValuesPromise
  extends Promise<StoredFoodPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  validThru: () => Promise<String>;
}

export interface StoredFoodPreviousValuesSubscription
  extends Promise<AsyncIterator<StoredFoodPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  validThru: () => Promise<AsyncIterator<String>>;
}

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1. 
*/
export type Int = number;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

export type Long = string;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "Food",
    embedded: false
  },
  {
    name: "StoredFood",
    embedded: false
  },
  {
    name: "Space",
    embedded: false
  },
  {
    name: "StorageMethod",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const prisma: Prisma;
