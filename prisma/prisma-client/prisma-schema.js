module.exports = {
        typeDefs: // Code generated by Prisma (prisma@1.32.2). DO NOT EDIT.
  // Please don't change this file manually but run `prisma generate` to update it.
  // For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

/* GraphQL */ `type AggregateFood {
  count: Int!
}

type AggregateSpace {
  count: Int!
}

type AggregateStoredFood {
  count: Int!
}

type BatchPayload {
  count: Long!
}

scalar DateTime

type Food {
  id: ID!
  name: String!
  updatedAt: DateTime!
  createdAt: DateTime!
}

type FoodConnection {
  pageInfo: PageInfo!
  edges: [FoodEdge]!
  aggregate: AggregateFood!
}

input FoodCreateInput {
  id: ID
  name: String!
}

input FoodCreateOneInput {
  create: FoodCreateInput
  connect: FoodWhereUniqueInput
}

type FoodEdge {
  node: Food!
  cursor: String!
}

enum FoodOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type FoodPreviousValues {
  id: ID!
  name: String!
  updatedAt: DateTime!
  createdAt: DateTime!
}

type FoodSubscriptionPayload {
  mutation: MutationType!
  node: Food
  updatedFields: [String!]
  previousValues: FoodPreviousValues
}

input FoodSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: FoodWhereInput
  AND: [FoodSubscriptionWhereInput!]
  OR: [FoodSubscriptionWhereInput!]
  NOT: [FoodSubscriptionWhereInput!]
}

input FoodUpdateDataInput {
  name: String
}

input FoodUpdateInput {
  name: String
}

input FoodUpdateManyMutationInput {
  name: String
}

input FoodUpdateOneRequiredInput {
  create: FoodCreateInput
  update: FoodUpdateDataInput
  upsert: FoodUpsertNestedInput
  connect: FoodWhereUniqueInput
}

input FoodUpsertNestedInput {
  update: FoodUpdateDataInput!
  create: FoodCreateInput!
}

input FoodWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  AND: [FoodWhereInput!]
  OR: [FoodWhereInput!]
  NOT: [FoodWhereInput!]
}

input FoodWhereUniqueInput {
  id: ID
}

scalar Long

type Mutation {
  createFood(data: FoodCreateInput!): Food!
  updateFood(data: FoodUpdateInput!, where: FoodWhereUniqueInput!): Food
  updateManyFoods(data: FoodUpdateManyMutationInput!, where: FoodWhereInput): BatchPayload!
  upsertFood(where: FoodWhereUniqueInput!, create: FoodCreateInput!, update: FoodUpdateInput!): Food!
  deleteFood(where: FoodWhereUniqueInput!): Food
  deleteManyFoods(where: FoodWhereInput): BatchPayload!
  createSpace(data: SpaceCreateInput!): Space!
  updateSpace(data: SpaceUpdateInput!, where: SpaceWhereUniqueInput!): Space
  updateManySpaces(data: SpaceUpdateManyMutationInput!, where: SpaceWhereInput): BatchPayload!
  upsertSpace(where: SpaceWhereUniqueInput!, create: SpaceCreateInput!, update: SpaceUpdateInput!): Space!
  deleteSpace(where: SpaceWhereUniqueInput!): Space
  deleteManySpaces(where: SpaceWhereInput): BatchPayload!
  createStoredFood(data: StoredFoodCreateInput!): StoredFood!
  updateStoredFood(data: StoredFoodUpdateInput!, where: StoredFoodWhereUniqueInput!): StoredFood
  updateManyStoredFoods(data: StoredFoodUpdateManyMutationInput!, where: StoredFoodWhereInput): BatchPayload!
  upsertStoredFood(where: StoredFoodWhereUniqueInput!, create: StoredFoodCreateInput!, update: StoredFoodUpdateInput!): StoredFood!
  deleteStoredFood(where: StoredFoodWhereUniqueInput!): StoredFood
  deleteManyStoredFoods(where: StoredFoodWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Query {
  food(where: FoodWhereUniqueInput!): Food
  foods(where: FoodWhereInput, orderBy: FoodOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Food]!
  foodsConnection(where: FoodWhereInput, orderBy: FoodOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): FoodConnection!
  space(where: SpaceWhereUniqueInput!): Space
  spaces(where: SpaceWhereInput, orderBy: SpaceOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Space]!
  spacesConnection(where: SpaceWhereInput, orderBy: SpaceOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): SpaceConnection!
  storedFood(where: StoredFoodWhereUniqueInput!): StoredFood
  storedFoods(where: StoredFoodWhereInput, orderBy: StoredFoodOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [StoredFood]!
  storedFoodsConnection(where: StoredFoodWhereInput, orderBy: StoredFoodOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): StoredFoodConnection!
  node(id: ID!): Node
}

type Space {
  id: ID!
  name: String!
  storeAs: StorageMethod!
  foods(where: StoredFoodWhereInput, orderBy: StoredFoodOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [StoredFood!]
  icon: String
  updatedAt: DateTime!
  createdAt: DateTime!
}

type SpaceConnection {
  pageInfo: PageInfo!
  edges: [SpaceEdge]!
  aggregate: AggregateSpace!
}

input SpaceCreateInput {
  id: ID
  name: String!
  storeAs: StorageMethod!
  foods: StoredFoodCreateManyInput
  icon: String
}

type SpaceEdge {
  node: Space!
  cursor: String!
}

enum SpaceOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  storeAs_ASC
  storeAs_DESC
  icon_ASC
  icon_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type SpacePreviousValues {
  id: ID!
  name: String!
  storeAs: StorageMethod!
  icon: String
  updatedAt: DateTime!
  createdAt: DateTime!
}

type SpaceSubscriptionPayload {
  mutation: MutationType!
  node: Space
  updatedFields: [String!]
  previousValues: SpacePreviousValues
}

input SpaceSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: SpaceWhereInput
  AND: [SpaceSubscriptionWhereInput!]
  OR: [SpaceSubscriptionWhereInput!]
  NOT: [SpaceSubscriptionWhereInput!]
}

input SpaceUpdateInput {
  name: String
  storeAs: StorageMethod
  foods: StoredFoodUpdateManyInput
  icon: String
}

input SpaceUpdateManyMutationInput {
  name: String
  storeAs: StorageMethod
  icon: String
}

input SpaceWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  storeAs: StorageMethod
  storeAs_not: StorageMethod
  storeAs_in: [StorageMethod!]
  storeAs_not_in: [StorageMethod!]
  foods_every: StoredFoodWhereInput
  foods_some: StoredFoodWhereInput
  foods_none: StoredFoodWhereInput
  icon: String
  icon_not: String
  icon_in: [String!]
  icon_not_in: [String!]
  icon_lt: String
  icon_lte: String
  icon_gt: String
  icon_gte: String
  icon_contains: String
  icon_not_contains: String
  icon_starts_with: String
  icon_not_starts_with: String
  icon_ends_with: String
  icon_not_ends_with: String
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  AND: [SpaceWhereInput!]
  OR: [SpaceWhereInput!]
  NOT: [SpaceWhereInput!]
}

input SpaceWhereUniqueInput {
  id: ID
}

enum StorageMethod {
  FROZEN
  COLD
  NATURAL
}

type StoredFood {
  id: ID!
  food: Food!
  validThru: String!
}

type StoredFoodConnection {
  pageInfo: PageInfo!
  edges: [StoredFoodEdge]!
  aggregate: AggregateStoredFood!
}

input StoredFoodCreateInput {
  id: ID
  food: FoodCreateOneInput!
  validThru: String!
}

input StoredFoodCreateManyInput {
  create: [StoredFoodCreateInput!]
  connect: [StoredFoodWhereUniqueInput!]
}

type StoredFoodEdge {
  node: StoredFood!
  cursor: String!
}

enum StoredFoodOrderByInput {
  id_ASC
  id_DESC
  validThru_ASC
  validThru_DESC
}

type StoredFoodPreviousValues {
  id: ID!
  validThru: String!
}

input StoredFoodScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  validThru: String
  validThru_not: String
  validThru_in: [String!]
  validThru_not_in: [String!]
  validThru_lt: String
  validThru_lte: String
  validThru_gt: String
  validThru_gte: String
  validThru_contains: String
  validThru_not_contains: String
  validThru_starts_with: String
  validThru_not_starts_with: String
  validThru_ends_with: String
  validThru_not_ends_with: String
  AND: [StoredFoodScalarWhereInput!]
  OR: [StoredFoodScalarWhereInput!]
  NOT: [StoredFoodScalarWhereInput!]
}

type StoredFoodSubscriptionPayload {
  mutation: MutationType!
  node: StoredFood
  updatedFields: [String!]
  previousValues: StoredFoodPreviousValues
}

input StoredFoodSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: StoredFoodWhereInput
  AND: [StoredFoodSubscriptionWhereInput!]
  OR: [StoredFoodSubscriptionWhereInput!]
  NOT: [StoredFoodSubscriptionWhereInput!]
}

input StoredFoodUpdateDataInput {
  food: FoodUpdateOneRequiredInput
  validThru: String
}

input StoredFoodUpdateInput {
  food: FoodUpdateOneRequiredInput
  validThru: String
}

input StoredFoodUpdateManyDataInput {
  validThru: String
}

input StoredFoodUpdateManyInput {
  create: [StoredFoodCreateInput!]
  update: [StoredFoodUpdateWithWhereUniqueNestedInput!]
  upsert: [StoredFoodUpsertWithWhereUniqueNestedInput!]
  delete: [StoredFoodWhereUniqueInput!]
  connect: [StoredFoodWhereUniqueInput!]
  set: [StoredFoodWhereUniqueInput!]
  disconnect: [StoredFoodWhereUniqueInput!]
  deleteMany: [StoredFoodScalarWhereInput!]
  updateMany: [StoredFoodUpdateManyWithWhereNestedInput!]
}

input StoredFoodUpdateManyMutationInput {
  validThru: String
}

input StoredFoodUpdateManyWithWhereNestedInput {
  where: StoredFoodScalarWhereInput!
  data: StoredFoodUpdateManyDataInput!
}

input StoredFoodUpdateWithWhereUniqueNestedInput {
  where: StoredFoodWhereUniqueInput!
  data: StoredFoodUpdateDataInput!
}

input StoredFoodUpsertWithWhereUniqueNestedInput {
  where: StoredFoodWhereUniqueInput!
  update: StoredFoodUpdateDataInput!
  create: StoredFoodCreateInput!
}

input StoredFoodWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  food: FoodWhereInput
  validThru: String
  validThru_not: String
  validThru_in: [String!]
  validThru_not_in: [String!]
  validThru_lt: String
  validThru_lte: String
  validThru_gt: String
  validThru_gte: String
  validThru_contains: String
  validThru_not_contains: String
  validThru_starts_with: String
  validThru_not_starts_with: String
  validThru_ends_with: String
  validThru_not_ends_with: String
  AND: [StoredFoodWhereInput!]
  OR: [StoredFoodWhereInput!]
  NOT: [StoredFoodWhereInput!]
}

input StoredFoodWhereUniqueInput {
  id: ID
}

type Subscription {
  food(where: FoodSubscriptionWhereInput): FoodSubscriptionPayload
  space(where: SpaceSubscriptionWhereInput): SpaceSubscriptionPayload
  storedFood(where: StoredFoodSubscriptionWhereInput): StoredFoodSubscriptionPayload
}
`
      }
    